//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controller/Key input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Keyinput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Keyinput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Key input"",
    ""maps"": [
        {
            ""name"": ""KeyNote"",
            ""id"": ""981960db-7cc9-4408-91e2-71ebeac9ee5a"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""e1704c40-55c8-4315-897d-21343a8341f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""ccbc7a09-de3a-42b0-8fe9-c30b90af67a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Value"",
                    ""id"": ""322a1040-3f36-470a-ae79-476ad2d6109f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""F"",
                    ""type"": ""Button"",
                    ""id"": ""f2e5dc96-6ac3-4fff-970f-5c59d698105a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""G"",
                    ""type"": ""Button"",
                    ""id"": ""1af98c8d-3e80-45cf-b706-12b633dff3e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""H"",
                    ""type"": ""Button"",
                    ""id"": ""b0a70cd7-b607-41ee-a955-4535a05fb16b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceBar"",
                    ""type"": ""Button"",
                    ""id"": ""82e6e68d-83b6-481a-8127-671c8030df5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51106f08-e2d0-44e9-95f6-ba1bb568caaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31ba2f5d-8979-448c-b6e8-3732c8571409"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a584e15-a865-4c2a-a876-48e475d3870d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9816cda-d0a2-4275-9cd8-968d1f8382fb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7cfc8b3-50fb-46c9-aa7c-adf392407718"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""G"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2509ccde-33ea-4516-b297-8e31121e45b6"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""H"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae3e9c5-8dfa-4fc5-97f9-ea6df68e5adf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceBar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyNote
        m_KeyNote = asset.FindActionMap("KeyNote", throwIfNotFound: true);
        m_KeyNote_A = m_KeyNote.FindAction("A", throwIfNotFound: true);
        m_KeyNote_S = m_KeyNote.FindAction("S", throwIfNotFound: true);
        m_KeyNote_D = m_KeyNote.FindAction("D", throwIfNotFound: true);
        m_KeyNote_F = m_KeyNote.FindAction("F", throwIfNotFound: true);
        m_KeyNote_G = m_KeyNote.FindAction("G", throwIfNotFound: true);
        m_KeyNote_H = m_KeyNote.FindAction("H", throwIfNotFound: true);
        m_KeyNote_SpaceBar = m_KeyNote.FindAction("SpaceBar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyNote
    private readonly InputActionMap m_KeyNote;
    private IKeyNoteActions m_KeyNoteActionsCallbackInterface;
    private readonly InputAction m_KeyNote_A;
    private readonly InputAction m_KeyNote_S;
    private readonly InputAction m_KeyNote_D;
    private readonly InputAction m_KeyNote_F;
    private readonly InputAction m_KeyNote_G;
    private readonly InputAction m_KeyNote_H;
    private readonly InputAction m_KeyNote_SpaceBar;
    public struct KeyNoteActions
    {
        private @Keyinput m_Wrapper;
        public KeyNoteActions(@Keyinput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_KeyNote_A;
        public InputAction @S => m_Wrapper.m_KeyNote_S;
        public InputAction @D => m_Wrapper.m_KeyNote_D;
        public InputAction @F => m_Wrapper.m_KeyNote_F;
        public InputAction @G => m_Wrapper.m_KeyNote_G;
        public InputAction @H => m_Wrapper.m_KeyNote_H;
        public InputAction @SpaceBar => m_Wrapper.m_KeyNote_SpaceBar;
        public InputActionMap Get() { return m_Wrapper.m_KeyNote; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyNoteActions set) { return set.Get(); }
        public void SetCallbacks(IKeyNoteActions instance)
        {
            if (m_Wrapper.m_KeyNoteActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnA;
                @S.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnS;
                @S.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnS;
                @S.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnS;
                @D.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnD;
                @D.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnD;
                @D.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnD;
                @F.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnF;
                @F.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnF;
                @F.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnF;
                @G.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnG;
                @G.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnG;
                @G.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnG;
                @H.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnH;
                @H.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnH;
                @H.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnH;
                @SpaceBar.started -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnSpaceBar;
                @SpaceBar.performed -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnSpaceBar;
                @SpaceBar.canceled -= m_Wrapper.m_KeyNoteActionsCallbackInterface.OnSpaceBar;
            }
            m_Wrapper.m_KeyNoteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @S.started += instance.OnS;
                @S.performed += instance.OnS;
                @S.canceled += instance.OnS;
                @D.started += instance.OnD;
                @D.performed += instance.OnD;
                @D.canceled += instance.OnD;
                @F.started += instance.OnF;
                @F.performed += instance.OnF;
                @F.canceled += instance.OnF;
                @G.started += instance.OnG;
                @G.performed += instance.OnG;
                @G.canceled += instance.OnG;
                @H.started += instance.OnH;
                @H.performed += instance.OnH;
                @H.canceled += instance.OnH;
                @SpaceBar.started += instance.OnSpaceBar;
                @SpaceBar.performed += instance.OnSpaceBar;
                @SpaceBar.canceled += instance.OnSpaceBar;
            }
        }
    }
    public KeyNoteActions @KeyNote => new KeyNoteActions(this);
    public interface IKeyNoteActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnF(InputAction.CallbackContext context);
        void OnG(InputAction.CallbackContext context);
        void OnH(InputAction.CallbackContext context);
        void OnSpaceBar(InputAction.CallbackContext context);
    }
}
